import random
from datetime import timedelta, date
from django.core.management.base import BaseCommand
from django.utils import timezone
from decimal import Decimal
from booking.models import Booking, BookingLine, HomestayAvailability
from homestays.models import Homestay
from users.models import User

class Command(BaseCommand):
    help = "Seed bookings with realistic data"

    def handle(self, *args, **options):
        today = timezone.now().date()
        
        # X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈©
        self.stdout.write(self.style.WARNING("ƒêang x√≥a d·ªØ li·ªáu booking c≈©..."))
        BookingLine.objects.all().delete()
        HomestayAvailability.objects.all().delete()
        Booking.objects.all().delete()
        self.stdout.write(self.style.SUCCESS("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu booking c≈©"))

        guests = User.objects.filter(type='guest')
        homestays = list(Homestay.objects.all())

        if not guests.exists() or not homestays:
            self.stdout.write(self.style.ERROR("‚ùå Kh√¥ng c√≥ ƒë·ªß d·ªØ li·ªáu guests ho·∫∑c homestays."))
            return
        
        # L∆∞u l·∫°i ng√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t cho m·ªói homestay
        booked_dates = {homestay.id: set() for homestay in homestays}

        # T·∫°o booking trong 3 th√°ng tr∆∞·ªõc
        self.stdout.write(self.style.WARNING("ƒêang t·∫°o booking cho 3 th√°ng tr∆∞·ªõc..."))
        three_months_ago = today - timedelta(days=90)
        past_homestays = homestays
        
        for homestay in past_homestays:
            # M·ªói homestay c√≥ 10-15 booking trong 3 th√°ng tr∆∞·ªõc
            for _ in range(random.randint(10, 15)):
                guest = random.choice(guests)
                
                # T√¨m ng√†y checkin h·ª£p l·ªá (trong kho·∫£ng 3 th√°ng tr∆∞·ªõc ƒë·∫øn h√¥m nay)
                max_attempts = 20  # Gi·ªõi h·∫°n s·ªë l·∫ßn th·ª≠ ƒë·ªÉ tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
                attempt = 0
                valid_dates_found = False
                
                while attempt < max_attempts and not valid_dates_found:
                    attempt += 1
                    
                    # Ng√†y checkout trong kho·∫£ng t·ª´ 3 th√°ng tr∆∞·ªõc ƒë·∫øn h√¥m nay
                    days_before_today = random.randint(1, 90)
                    checkout_date = today - timedelta(days=days_before_today)
                    
                    # Th·ªùi gian l∆∞u tr√∫ t·ª´ 1-7 ng√†y
                    stay_duration = random.randint(1, 7)
                    checkin_date = checkout_date - timedelta(days=stay_duration)
                    
                    # ƒê·∫£m b·∫£o ng√†y checkin kh√¥ng s·ªõm h∆°n 3 th√°ng tr∆∞·ªõc
                    if checkin_date < three_months_ago:
                        continue
                    
                    # Ki·ªÉm tra xem kho·∫£ng th·ªùi gian n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ch∆∞a
                    date_range = set(checkin_date + timedelta(days=d) for d in range(stay_duration))
                    if not date_range.intersection(booked_dates[homestay.id]):
                        valid_dates_found = True
                        booked_dates[homestay.id].update(date_range)
                
                if not valid_dates_found:
                    self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m ng√†y tr·ªëng cho homestay {homestay.id}"))
                    continue

                status = random.choice(['confirmed', 'cancelled', 'rejected'])
                subtotal, fee, total = Booking.calculate_booking_price(homestay, checkin_date, checkout_date)

                booking = Booking.objects.create(
                    user=guest,
                    homestay=homestay,
                    checkin_date=checkin_date,
                    checkout_date=checkout_date,
                    guests=random.randint(1, homestay.max_guests),
                    status=status,
                    currency='USD',
                    subtotal=subtotal,
                    fee=fee,
                    total_amount=total,
                    note=''
                )

                self.create_booking_lines(booking)

                # G·∫Øn v·ªõi HomestayAvailability
                for single_date in (checkin_date + timedelta(n) for n in range((checkout_date - checkin_date).days)):
                    HomestayAvailability.objects.get_or_create(
                        homestay=homestay,
                        date=single_date,
                        defaults={
                            'price': homestay.base_price,
                            'status': 'booked',
                            'booking': booking
                        }
                    )
                
                self.stdout.write(f"  ‚úÖ Booking {booking.id}: {checkin_date} ‚Üí {checkout_date} ({(checkout_date - checkin_date).days} ng√†y)")

        # T·∫°o booking sau h√¥m nay cho 100 homestays
        self.stdout.write(self.style.WARNING("ƒêang t·∫°o booking cho t∆∞∆°ng lai..."))
        future_homestays = random.sample(homestays, min(100, len(homestays)))
        for homestay in future_homestays:
            for _ in range(random.randint(1, 2)):
                guest = random.choice(guests)
                
                # T√¨m ng√†y checkin h·ª£p l·ªá trong t∆∞∆°ng lai
                max_attempts = 20
                attempt = 0
                valid_dates_found = False
                
                while attempt < max_attempts and not valid_dates_found:
                    attempt += 1
                    
                    delta_days = random.randint(2, 7)  # Th·ªùi gian l∆∞u tr√∫
                    checkin_date = today + timedelta(days=random.randint(1, 30))  # Trong v√≤ng 30 ng√†y t·ªõi
                    checkout_date = checkin_date + timedelta(days=delta_days)
                    
                    # Ki·ªÉm tra xem kho·∫£ng th·ªùi gian n√†y ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ch∆∞a
                    date_range = set(checkin_date + timedelta(days=d) for d in range(delta_days))
                    if not date_range.intersection(booked_dates[homestay.id]):
                        valid_dates_found = True
                        booked_dates[homestay.id].update(date_range)
                
                if not valid_dates_found:
                    self.stdout.write(self.style.WARNING(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√¨m ng√†y tr·ªëng cho homestay {homestay.id} trong t∆∞∆°ng lai"))
                    continue

                status = random.choice(['pending', 'confirmed', 'cancelled', 'rejected'])
                subtotal, fee, total = Booking.calculate_booking_price(homestay, checkin_date, checkout_date)

                booking = Booking.objects.create(
                    user=guest,
                    homestay=homestay,
                    checkin_date=checkin_date,
                    checkout_date=checkout_date,
                    guests=random.randint(1, homestay.max_guests),
                    status=status,
                    currency='USD',
                    subtotal=subtotal,
                    fee=fee,
                    total_amount=total,
                    note='Request from guest'
                )

                self.create_booking_lines(booking)

                for single_date in (checkin_date + timedelta(n) for n in range((checkout_date - checkin_date).days)):
                    HomestayAvailability.objects.get_or_create(
                        homestay=homestay,
                        date=single_date,
                        defaults={
                            'price': homestay.base_price,
                            'status': 'booked',
                            'booking': booking
                        }
                    )
                
                self.stdout.write(f"  ‚úÖ Booking t∆∞∆°ng lai {booking.id}: {checkin_date} ‚Üí {checkout_date}")

        self.stdout.write(self.style.SUCCESS("üéâ ƒê√£ seed d·ªØ li·ªáu bookings th√†nh c√¥ng!"))

    def create_booking_lines(self, booking):
        """T·∫°o d·ªãch v·ª• ƒëi k√®m cho booking m·ªôt c√°ch ƒëa d·∫°ng"""
        service_catalog = [
            {"type": "Breakfast", "price_range": (3, 10)},
            {"type": "Airport Pickup", "price_range": (10, 25)},
            {"type": "Laundry", "price_range": (5, 15)},
            {"type": "City Tour", "price_range": (20, 50)},
            {"type": "Bike Rental", "price_range": (5, 15)},
            {"type": "Dinner", "price_range": (7, 20)},
            {"type": "Parking", "price_range": (2, 10)},
            {"type": "Pet Fee", "price_range": (10, 30)},
        ]

        used_types = set()
        for _ in range(random.randint(1, 4)):
            service = random.choice(service_catalog)
            while service["type"] in used_types and len(used_types) < len(service_catalog):
                service = random.choice(service_catalog)
            used_types.add(service["type"])

            single_amount = Decimal(random.uniform(*service["price_range"])).quantize(Decimal('0.01'))
            quantity = random.randint(1, 3)
            sub_amount = single_amount * quantity

            BookingLine.objects.create(
                booking=booking,
                type=service["type"],
                single_amount=single_amount,
                quantity=quantity,
                sub_amount=sub_amount
            )